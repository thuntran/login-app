{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","App","handleChange","e","target","name","value","setState","configureCaptcha","window","recaptchaVerifier","auth","RecaptchaVerifier","response","onSubmitPhoneNumber","console","log","defaultCountry","preventDefault","phoneNumber","state","mobile","appVerifier","signInWithPhoneNumber","then","confirmationResult","catch","error","onSubmitAccessCode","code","accesscode","confirm","result","user","JSON","stringify","alert","onSubmit","this","id","type","placeholder","required","onChange","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAcAA,IAASC,cAVY,CACjBC,OAAQ,0CACRC,WAAY,kCACZC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,cACnBC,MAAO,6CAKIP,QAAf,E,OCZMQ,E,4MAEJC,aAAe,SAACC,GACd,MAAsBA,EAAEC,OAAjBC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAEb,EAAKC,SAAL,eACKF,EAAOC,K,EAIdE,iBAAmB,WACjBC,OAAOC,kBAAoB,IAAIjB,EAASkB,KAAKC,kBAAkB,iBAAkB,CAC/E,KAAQ,YACR,SAAY,SAACC,GAEX,EAAKC,sBACLC,QAAQC,IAAI,wBAEdC,eAAgB,Q,EAIpBH,oBAAsB,SAACX,GACrBA,EAAEe,iBAEF,EAAKV,mBACL,IAAMW,EAAc,KAAO,EAAKC,MAAMC,OACtCN,QAAQC,IAAIG,GACZ,IAAMG,EAAcb,OAAOC,kBAC3BjB,EAASkB,OAAOY,sBAAsBJ,EAAaG,GAC9CE,MAAK,SAACC,GAGLhB,OAAOgB,mBAAqBA,EAC5BV,QAAQC,IAAI,iCACXU,OAAM,SAACC,GAERZ,QAAQC,IAAI,wC,EAIpBY,mBAAqB,SAACzB,GACpBA,EAAEe,iBACF,IAAMW,EAAO,EAAKT,MAAMU,WACxBf,QAAQC,IAAIa,GACZpB,OAAOgB,mBAAmBM,QAAQF,GAAML,MAAK,SAACQ,GAE5C,IAAMC,EAAOD,EAAOC,KACpBlB,QAAQC,IAAIkB,KAAKC,UAAUF,IAC3BG,MAAM,4BACLV,OAAM,SAACC,GAERS,MAAM,4C,4CAIV,WACE,OACE,gCACE,qDACA,uBAAMC,SAAUC,KAAKxB,oBAArB,UACE,qBAAKyB,GAAG,mBACR,uBAAOC,KAAK,SAASnC,KAAK,SAASoC,YAAY,yBAAyBC,UAAQ,EAACC,SAAUL,KAAKpC,eAChG,wBAAQsC,KAAK,SAAb,uBAGF,oDACA,uBAAMH,SAAUC,KAAKV,mBAArB,UACE,uBAAOY,KAAK,SAASnC,KAAK,aAAaoC,YAAY,wBAAwBC,UAAQ,EAACC,SAAUL,KAAKpC,eACnG,wBAAQsC,KAAK,SAAb,8B,GArEQI,IAAMC,WA4ET5C,ICnEA6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e35f4470.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/auth'\r\n\r\n// Firebase configuration for the app\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyC6fklFadegUexGNFtenpp7IkSD0JmMY4c\",\r\n    authDomain: \"login-app-387bd.firebaseapp.com\",\r\n    projectId: \"login-app-387bd\",\r\n    storageBucket: \"login-app-387bd.appspot.com\",\r\n    messagingSenderId: \"60218145221\",\r\n    appId: \"1:60218145221:web:c7bea0ae1648103bf633ac\"\r\n  };\r\n  \r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase","import React from 'react'\nimport firebase from './firebase'\n\nclass App extends React.Component {\n  // To handle the inputs for mobile phone and access code\n  handleChange = (e) => {\n    const {name, value} = e.target\n    // Re-render component with the updated state\n    this.setState({\n        [name]: value\n      })\n  }\n  // Use invisible reCAPTCHA with Firebase\n  configureCaptcha = () => {\n    window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('sign-in-button', {\n      'size': 'invisible',\n      'callback': (response) => {\n        // reCAPTCHA solved, allow signInWithPhoneNumber.\n        this.onSubmitPhoneNumber();\n        console.log(\"reCAPTCHA verified.\")\n      },\n      defaultCountry: \"US\"\n    });\n  }\n  // Send a random 6-digit access code with Firebase upon receiving the phone number\n  onSubmitPhoneNumber = (e) => {\n    e.preventDefault()\n\n    this.configureCaptcha()\n    const phoneNumber = \"+1\" + this.state.mobile // default: US mobile number\n    console.log(phoneNumber) // for checking the phone number in the console\n    const appVerifier = window.recaptchaVerifier;\n    firebase.auth().signInWithPhoneNumber(phoneNumber, appVerifier)\n        .then((confirmationResult) => {\n          // SMS sent. Prompt user to type the code from the message, then sign the\n          // user in with confirmationResult.confirm(code).\n          window.confirmationResult = confirmationResult;\n          console.log(\"Access code has been sent.\")\n        }).catch((error) => {\n          // Error; SMS not sent\n          console.log(\"Error: Fail to send access code.\")\n        });\n  }\n  // Verify the access code with Firebase upon receiving the access code\n  onSubmitAccessCode = (e) => {\n    e.preventDefault()\n    const code = this.state.accesscode\n    console.log(code) // for checking the access code in the console\n    window.confirmationResult.confirm(code).then((result) => {\n      // Access code is correct, success.\n      const user = result.user;\n      console.log(JSON.stringify(user))\n      alert(\"Access code verified.\")\n    }).catch((error) => {\n      // Wrong access code, failure.\n      alert(\"Wrong access code, please try again.\")\n\n    });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Enter phone number:</h2>\n        <form onSubmit={this.onSubmitPhoneNumber}>\n          <div id=\"sign-in-button\"></div>\n          <input type=\"number\" name=\"mobile\" placeholder=\"Your phone number here\" required onChange={this.handleChange}/>\n          <button type=\"submit\">Submit</button>\n        </form>\n\n        <h2>Enter access code:</h2>\n        <form onSubmit={this.onSubmitAccessCode}>\n          <input type=\"number\" name=\"accesscode\" placeholder=\"Your access code here\" required onChange={this.handleChange}/>\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}